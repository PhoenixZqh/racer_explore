<?xml version="1.0" encoding="utf-8"?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from bounce_mav.gazebo              | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<!--
  Copyright 2015 Fadri Furrer, ASL, ETH Zurich, Switzerland
  Copyright 2015 Michael Burri, ASL, ETH Zurich, Switzerland
  Copyright 2015 Mina Kamel, ASL, ETH Zurich, Switzerland
  Copyright 2015 Janosch Nikolic, ASL, ETH Zurich, Switzerland
  Copyright 2015 Markus Achtelik, ASL, ETH Zurich, Switzerland

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<robot name="iris">
  <!-- =============================================================== -->
  <!-- ==================== ROS INTERFACE MACRO ====================== -->
  <!-- =============================================================== -->
  <!-- <xacro:macro 
  		name="ros_interface_plugin_macro"
  		params="namespace">
    <gazebo>
      <plugin name="ros_interface_plugin" filename="librotors_gazebo_ros_interface_plugin.so">
        <robotNamespace>${namespace}</robotNamespace>
      </plugin>
    </gazebo>
  </xacro:macro>-->
  <link name="iris/base_link"/>
  <joint name="iris/base_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="iris/base_link"/>
    <child link="iris/base_link_inertia"/>
  </joint>
  <link name="iris/base_link_inertia">
    <inertial>
      <mass value="1.5"/>
      <!-- [kg] -->
      <origin xyz="0 0 0"/>
      <inertia ixx="0.0347563" ixy="0.0" ixz="0.0" iyy="0.0458929" iyz="0.0" izz="0.0977"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://rotors_description/meshes/iris.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.47 0.47 0.11"/>
        <!-- [m] [m] [m] -->
      </geometry>
    </collision>
  </link>
  <!-- attach multirotor_base_plugin to the base_link -->
  <gazebo>
    <plugin filename="librotors_gazebo_multirotor_base_plugin.so" name="multirotor_base_plugin">
      <robotNamespace>iris</robotNamespace>
      <linkName>iris/base_link</linkName>
      <rotorVelocitySlowdownSim>10</rotorVelocitySlowdownSim>
    </plugin>
  </gazebo>
  <joint name="iris/rotor_0_joint" type="continuous">
    <origin rpy="0 0 0" xyz="0.13 -0.22 0.023"/>
    <axis xyz="0 0 1"/>
    <!-- TODO(ff): not currently set because it's not yet supported -->
    <!-- <limit effort="2000" velocity="${max_rot_velocity}" /> -->
    <parent link="iris/base_link"/>
    <child link="iris/rotor_0"/>
  </joint>
  <link name="iris/rotor_0">
    <inertial>
      <mass value="0.005"/>
      <!-- [kg] -->
      <inertia ixx="9.7499961e-07" ixy="0.0" ixz="0.0" iyy="4.1704149985e-05" iyz="0.0" izz="4.2604149625e-05"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="package://rotors_description/meshes/propeller_ccw.dae" scale="0.1 0.1 0.1"/>
        <!-- The propeller meshes have a radius of 1m -->
        <!-- <box size="${2*radius_rotor} 0.01 0.005"/> -->
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.005" radius="0.1"/>
        <!-- [m] -->
      </geometry>
    </collision>
  </link>
  <gazebo>
    <plugin filename="librotors_gazebo_motor_model.so" name="iris_front_right_motor_model">
      <robotNamespace>iris</robotNamespace>
      <jointName>iris/rotor_0_joint</jointName>
      <linkName>iris/rotor_0</linkName>
      <turningDirection>ccw</turningDirection>
      <timeConstantUp>0.0125</timeConstantUp>
      <timeConstantDown>0.025</timeConstantDown>
      <maxRotVelocity>838</maxRotVelocity>
      <motorConstant>8.54858e-06</motorConstant>
      <momentConstant>0.016</momentConstant>
      <commandSubTopic>gazebo/command/motor_speed</commandSubTopic>
      <motorNumber>0</motorNumber>
      <rotorDragCoefficient>8.06428e-05</rotorDragCoefficient>
      <rollingMomentCoefficient>1e-06</rollingMomentCoefficient>
      <motorSpeedPubTopic>motor_speed/0</motorSpeedPubTopic>
      <rotorVelocitySlowdownSim>10</rotorVelocitySlowdownSim>
    </plugin>
  </gazebo>
  <gazebo reference="iris/rotor_0">
    <material>Gazebo/Blue</material>
  </gazebo>
  <joint name="iris/rotor_1_joint" type="continuous">
    <origin rpy="0 0 0" xyz="-0.13 0.2 0.023"/>
    <axis xyz="0 0 1"/>
    <!-- TODO(ff): not currently set because it's not yet supported -->
    <!-- <limit effort="2000" velocity="${max_rot_velocity}" /> -->
    <parent link="iris/base_link"/>
    <child link="iris/rotor_1"/>
  </joint>
  <link name="iris/rotor_1">
    <inertial>
      <mass value="0.005"/>
      <!-- [kg] -->
      <inertia ixx="9.7499961e-07" ixy="0.0" ixz="0.0" iyy="4.1704149985e-05" iyz="0.0" izz="4.2604149625e-05"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="package://rotors_description/meshes/propeller_ccw.dae" scale="0.1 0.1 0.1"/>
        <!-- The propeller meshes have a radius of 1m -->
        <!-- <box size="${2*radius_rotor} 0.01 0.005"/> -->
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.005" radius="0.1"/>
        <!-- [m] -->
      </geometry>
    </collision>
  </link>
  <gazebo>
    <plugin filename="librotors_gazebo_motor_model.so" name="iris_back_left_motor_model">
      <robotNamespace>iris</robotNamespace>
      <jointName>iris/rotor_1_joint</jointName>
      <linkName>iris/rotor_1</linkName>
      <turningDirection>ccw</turningDirection>
      <timeConstantUp>0.0125</timeConstantUp>
      <timeConstantDown>0.025</timeConstantDown>
      <maxRotVelocity>838</maxRotVelocity>
      <motorConstant>8.54858e-06</motorConstant>
      <momentConstant>0.016</momentConstant>
      <commandSubTopic>gazebo/command/motor_speed</commandSubTopic>
      <motorNumber>1</motorNumber>
      <rotorDragCoefficient>8.06428e-05</rotorDragCoefficient>
      <rollingMomentCoefficient>1e-06</rollingMomentCoefficient>
      <motorSpeedPubTopic>motor_speed/1</motorSpeedPubTopic>
      <rotorVelocitySlowdownSim>10</rotorVelocitySlowdownSim>
    </plugin>
  </gazebo>
  <gazebo reference="iris/rotor_1">
    <material>Gazebo/Red</material>
  </gazebo>
  <joint name="iris/rotor_2_joint" type="continuous">
    <origin rpy="0 0 0" xyz="0.13 0.22 0.023"/>
    <axis xyz="0 0 1"/>
    <!-- TODO(ff): not currently set because it's not yet supported -->
    <!-- <limit effort="2000" velocity="${max_rot_velocity}" /> -->
    <parent link="iris/base_link"/>
    <child link="iris/rotor_2"/>
  </joint>
  <link name="iris/rotor_2">
    <inertial>
      <mass value="0.005"/>
      <!-- [kg] -->
      <inertia ixx="9.7499961e-07" ixy="0.0" ixz="0.0" iyy="4.1704149985e-05" iyz="0.0" izz="4.2604149625e-05"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="package://rotors_description/meshes/propeller_cw.dae" scale="0.1 0.1 0.1"/>
        <!-- The propeller meshes have a radius of 1m -->
        <!-- <box size="${2*radius_rotor} 0.01 0.005"/> -->
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.005" radius="0.1"/>
        <!-- [m] -->
      </geometry>
    </collision>
  </link>
  <gazebo>
    <plugin filename="librotors_gazebo_motor_model.so" name="iris_front_left_motor_model">
      <robotNamespace>iris</robotNamespace>
      <jointName>iris/rotor_2_joint</jointName>
      <linkName>iris/rotor_2</linkName>
      <turningDirection>cw</turningDirection>
      <timeConstantUp>0.0125</timeConstantUp>
      <timeConstantDown>0.025</timeConstantDown>
      <maxRotVelocity>838</maxRotVelocity>
      <motorConstant>8.54858e-06</motorConstant>
      <momentConstant>0.016</momentConstant>
      <commandSubTopic>gazebo/command/motor_speed</commandSubTopic>
      <motorNumber>2</motorNumber>
      <rotorDragCoefficient>8.06428e-05</rotorDragCoefficient>
      <rollingMomentCoefficient>1e-06</rollingMomentCoefficient>
      <motorSpeedPubTopic>motor_speed/2</motorSpeedPubTopic>
      <rotorVelocitySlowdownSim>10</rotorVelocitySlowdownSim>
    </plugin>
  </gazebo>
  <gazebo reference="iris/rotor_2">
    <material>Gazebo/Blue</material>
  </gazebo>
  <joint name="iris/rotor_3_joint" type="continuous">
    <origin rpy="0 0 0" xyz="-0.13 -0.2 0.023"/>
    <axis xyz="0 0 1"/>
    <!-- TODO(ff): not currently set because it's not yet supported -->
    <!-- <limit effort="2000" velocity="${max_rot_velocity}" /> -->
    <parent link="iris/base_link"/>
    <child link="iris/rotor_3"/>
  </joint>
  <link name="iris/rotor_3">
    <inertial>
      <mass value="0.005"/>
      <!-- [kg] -->
      <inertia ixx="9.7499961e-07" ixy="0.0" ixz="0.0" iyy="4.1704149985e-05" iyz="0.0" izz="4.2604149625e-05"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="package://rotors_description/meshes/propeller_cw.dae" scale="0.1 0.1 0.1"/>
        <!-- The propeller meshes have a radius of 1m -->
        <!-- <box size="${2*radius_rotor} 0.01 0.005"/> -->
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.005" radius="0.1"/>
        <!-- [m] -->
      </geometry>
    </collision>
  </link>
  <gazebo>
    <plugin filename="librotors_gazebo_motor_model.so" name="iris_back_right_motor_model">
      <robotNamespace>iris</robotNamespace>
      <jointName>iris/rotor_3_joint</jointName>
      <linkName>iris/rotor_3</linkName>
      <turningDirection>cw</turningDirection>
      <timeConstantUp>0.0125</timeConstantUp>
      <timeConstantDown>0.025</timeConstantDown>
      <maxRotVelocity>838</maxRotVelocity>
      <motorConstant>8.54858e-06</motorConstant>
      <momentConstant>0.016</momentConstant>
      <commandSubTopic>gazebo/command/motor_speed</commandSubTopic>
      <motorNumber>3</motorNumber>
      <rotorDragCoefficient>8.06428e-05</rotorDragCoefficient>
      <rollingMomentCoefficient>1e-06</rollingMomentCoefficient>
      <motorSpeedPubTopic>motor_speed/3</motorSpeedPubTopic>
      <rotorVelocitySlowdownSim>10</rotorVelocitySlowdownSim>
    </plugin>
  </gazebo>
  <gazebo reference="iris/rotor_3">
    <material>Gazebo/Red</material>
  </gazebo>
  <gazebo>
    <plugin filename="librotors_gazebo_controller_interface.so" name="controller_interface">
      <robotNamespace>iris</robotNamespace>
      <commandAttitudeThrustSubTopic>command/attitude</commandAttitudeThrustSubTopic>
      <commandRateThrustSubTopic>command/rate</commandRateThrustSubTopic>
      <commandMotorSpeedSubTopic>command/motor_speed</commandMotorSpeedSubTopic>
      <imuSubTopic>imu</imuSubTopic>
      <motorSpeedCommandPubTopic>gazebo/command/motor_speed</motorSpeedCommandPubTopic>
    </plugin>
  </gazebo>
  <gazebo>
    <plugin filename="librotors_gazebo_mavlink_interface.so" name="mavlink_interface">
      <robotNamespace>iris</robotNamespace>
      <mavlinkControlSubTopic>/mavlink/from</mavlinkControlSubTopic>
      <imuSubTopic>imu</imuSubTopic>
      <mavlinkHilSensorPubTopic>/mavlink/to</mavlinkHilSensorPubTopic>
      <motorSpeedsPubTopic>gazebo/command/motor_speed</motorSpeedsPubTopic>
      <gpsUpdateFreq>5.0</gpsUpdateFreq>
      <!-- Frequency of HIL GPS messages [Hz] -->
      <rotorCount>4</rotorCount>
      <!-- [Gauss] Below are the North, East, and Down components of the Earth's magnetic field at the reference location.
             The default reference location is Zurich (lat=+47.3667degN, lon=+8.5500degE, h=+500m, WGS84).
	     You can obtain the magnetic field strength for your location using the World Magnetic Model: 
             https://www.ngdc.noaa.gov/geomag/WMM/calculators.shtml -->
      <referenceMagNorth>0.21475</referenceMagNorth>
      <referenceMagEast>0.00797</referenceMagEast>
      <referenceMagDown>0.42817</referenceMagDown>
      <referenceLatitude>47.3667</referenceLatitude>
      <!-- the initial latitude [degrees [-90, 90]] -->
      <referenceLongitude>8.55</referenceLongitude>
      <!-- the initial longitude [degrees [-180, 180]] -->
      <referenceAltitude>500.0</referenceAltitude>
      <!-- the initial altitude [m] -->
    </plugin>
  </gazebo>
  <!-- IMU link -->
  <link name="iris/imu_link">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="0.015"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
  </link>
  <!-- IMU joint -->
  <joint name="iris/imu_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="iris/base_link"/>
    <child link="iris/imu_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
  </joint>
  <gazebo>
    <plugin filename="librotors_gazebo_imu_plugin.so" name="rotors_gazebo_imu_plugin">
      <!-- A good description of the IMU parameters can be found in the kalibr documentation:
           https://github.com/ethz-asl/kalibr/wiki/IMU-Noise-Model-and-Intrinsics -->
      <robotNamespace>iris</robotNamespace>
      <!-- (string, required): ros namespace in which the messages are published -->
      <linkName>iris/imu_link</linkName>
      <!-- (string, required): name of the body which holds the IMU sensor -->
      <imuTopic>imu</imuTopic>
      <!-- (string): name of the sensor output topic and prefix of service names (defaults to imu) -->
      <gyroscopeNoiseDensity>0.0003394</gyroscopeNoiseDensity>
      <!-- Gyroscope noise density (two-sided spectrum) [rad/s/sqrt(Hz)] -->
      <gyroscopeRandomWalk>3.8785e-05</gyroscopeRandomWalk>
      <!-- Gyroscope bias random walk [rad/s/s/sqrt(Hz)] -->
      <gyroscopeBiasCorrelationTime>1000.0</gyroscopeBiasCorrelationTime>
      <!-- Gyroscope bias correlation time constant [s] -->
      <gyroscopeTurnOnBiasSigma>0.0087</gyroscopeTurnOnBiasSigma>
      <!-- Gyroscope turn on bias standard deviation [rad/s] -->
      <accelerometerNoiseDensity>0.004</accelerometerNoiseDensity>
      <!-- Accelerometer noise density (two-sided spectrum) [m/s^2/sqrt(Hz)] -->
      <accelerometerRandomWalk>0.006</accelerometerRandomWalk>
      <!-- Accelerometer bias random walk. [m/s^2/s/sqrt(Hz)] -->
      <accelerometerBiasCorrelationTime>300.0</accelerometerBiasCorrelationTime>
      <!-- Accelerometer bias correlation time constant [s] -->
      <accelerometerTurnOnBiasSigma>0.196</accelerometerTurnOnBiasSigma>
      <!-- Accelerometer turn on bias standard deviation [m/s^2] -->
    </plugin>
  </gazebo>
  <!-- IMU link -->
  <link name="iris/imugt_link">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="1e-05"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
  </link>
  <!-- IMU joint -->
  <joint name="iris/imugt_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="iris/base_link"/>
    <child link="iris/imugt_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
  </joint>
  <gazebo>
    <plugin filename="librotors_gazebo_imu_plugin.so" name="rotors_gazebo_imugt_plugin">
      <!-- A good description of the IMU parameters can be found in the kalibr documentation:
           https://github.com/ethz-asl/kalibr/wiki/IMU-Noise-Model-and-Intrinsics -->
      <robotNamespace>iris</robotNamespace>
      <!-- (string, required): ros namespace in which the messages are published -->
      <linkName>iris/imugt_link</linkName>
      <!-- (string, required): name of the body which holds the IMU sensor -->
      <imuTopic>ground_truth/imu</imuTopic>
      <!-- (string): name of the sensor output topic and prefix of service names (defaults to imu) -->
      <gyroscopeNoiseDensity>0.0</gyroscopeNoiseDensity>
      <!-- Gyroscope noise density (two-sided spectrum) [rad/s/sqrt(Hz)] -->
      <gyroscopeRandomWalk>0.0</gyroscopeRandomWalk>
      <!-- Gyroscope bias random walk [rad/s/s/sqrt(Hz)] -->
      <gyroscopeBiasCorrelationTime>1000.0</gyroscopeBiasCorrelationTime>
      <!-- Gyroscope bias correlation time constant [s] -->
      <gyroscopeTurnOnBiasSigma>0.0</gyroscopeTurnOnBiasSigma>
      <!-- Gyroscope turn on bias standard deviation [rad/s] -->
      <accelerometerNoiseDensity>0.0</accelerometerNoiseDensity>
      <!-- Accelerometer noise density (two-sided spectrum) [m/s^2/sqrt(Hz)] -->
      <accelerometerRandomWalk>0.0</accelerometerRandomWalk>
      <!-- Accelerometer bias random walk. [m/s^2/s/sqrt(Hz)] -->
      <accelerometerBiasCorrelationTime>300.0</accelerometerBiasCorrelationTime>
      <!-- Accelerometer bias correlation time constant [s] -->
      <accelerometerTurnOnBiasSigma>0.0</accelerometerTurnOnBiasSigma>
      <!-- Accelerometer turn on bias standard deviation [m/s^2] -->
    </plugin>
  </gazebo>
  <!-- odometry link -->
  <link name="iris/odometry_sensorgt_link">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="1e-05"/>
      <!-- [kg] -->
    </inertial>
  </link>
  <!-- odometry joint -->
  <joint name="iris/odometry_sensorgt_joint" type="revolute">
    <parent link="iris/base_link"/>
    <origin rpy="0.0 0.0 0.0" xyz="0.0 0.0 0.0"/>
    <child link="iris/odometry_sensorgt_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
  </joint>
  <gazebo>
    <plugin filename="librotors_gazebo_odometry_plugin.so" name="odometry_sensorgt">
      <linkName>iris/odometry_sensorgt_link</linkName>
      <robotNamespace>iris</robotNamespace>
      <poseTopic>ground_truth/pose</poseTopic>
      <poseWithCovarianceTopic>ground_truth/pose_with_covariance</poseWithCovarianceTopic>
      <positionTopic>ground_truth/position</positionTopic>
      <transformTopic>ground_truth/transform</transformTopic>
      <odometryTopic>ground_truth/odometry</odometryTopic>
      <parentFrameId>world</parentFrameId>
      <!-- Use the scoped link name here. e.g. Model::link. -->
      <childFrameId>iris/base_link</childFrameId>
      <measurementDivisor>1</measurementDivisor>
      <!-- only every (seq % measurementDivisor) == 0 measurement is published [int] -->
      <measurementDelay>0</measurementDelay>
      <!-- time that measurement gets held back before it's published in [simulation cycles (int)] -->
      <unknownDelay>0.0</unknownDelay>
      <!-- additional delay, that just gets added to the timestamp [s] -->
      <noiseNormalPosition>0 0 0</noiseNormalPosition>
      <!-- standard deviation of additive white gaussian noise [m] -->
      <noiseNormalQuaternion>0 0 0</noiseNormalQuaternion>
      <!-- standard deviation white gaussian noise [rad]: q_m = q*quaternionFromSmallAngleApproximation(noiseNormalQ) -->
      <noiseNormalLinearVelocity>0 0 0</noiseNormalLinearVelocity>
      <!-- standard deviation of additive white gaussian noise [m/s] -->
      <noiseNormalAngularVelocity>0 0 0</noiseNormalAngularVelocity>
      <!-- standard deviation of additive white gaussian noise [rad/s] -->
      <noiseUniformPosition>0 0 0</noiseUniformPosition>
      <!-- symmetric bounds of uniform noise [m] -->
      <noiseUniformQuaternion>0 0 0</noiseUniformQuaternion>
      <!-- symmetric bounds of uniform noise [rad], computation see above -->
      <noiseUniformLinearVelocity>0 0 0</noiseUniformLinearVelocity>
      <!-- symmetric bounds of uniform noise [m/s] -->
      <noiseUniformAngularVelocity>0 0 0</noiseUniformAngularVelocity>
    </plugin>
  </gazebo>
  <!-- odometry link -->
  <link name="iris/odometry_sensor1_link">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="1e-05"/>
      <!-- [kg] -->
    </inertial>
  </link>
  <!-- odometry joint -->
  <joint name="iris/odometry_sensor1_joint" type="revolute">
    <parent link="iris/base_link"/>
    <origin rpy="0.0 0.0 0.0" xyz="0.0 0.0 0.0"/>
    <child link="iris/odometry_sensor1_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
  </joint>
  <gazebo>
    <plugin filename="librotors_gazebo_odometry_plugin.so" name="odometry_sensor1">
      <linkName>iris/odometry_sensor1_link</linkName>
      <robotNamespace>iris</robotNamespace>
      <poseTopic>odometry_sensor1/pose</poseTopic>
      <poseWithCovarianceTopic>odometry_sensor1/pose_with_covariance</poseWithCovarianceTopic>
      <positionTopic>odometry_sensor1/position</positionTopic>
      <transformTopic>odometry_sensor1/transform</transformTopic>
      <odometryTopic>odometry_sensor1/odometry</odometryTopic>
      <parentFrameId>world</parentFrameId>
      <!-- Use the scoped link name here. e.g. Model::link. -->
      <childFrameId>iris/odometry_sensor1</childFrameId>
      <measurementDivisor>1</measurementDivisor>
      <!-- only every (seq % measurementDivisor) == 0 measurement is published [int] -->
      <measurementDelay>0</measurementDelay>
      <!-- time that measurement gets held back before it's published in [simulation cycles (int)] -->
      <unknownDelay>0.0</unknownDelay>
      <!-- additional delay, that just gets added to the timestamp [s] -->
      <noiseNormalPosition>0 0 0</noiseNormalPosition>
      <!-- standard deviation of additive white gaussian noise [m] -->
      <noiseNormalQuaternion>0 0 0</noiseNormalQuaternion>
      <!-- standard deviation white gaussian noise [rad]: q_m = q*quaternionFromSmallAngleApproximation(noiseNormalQ) -->
      <noiseNormalLinearVelocity>0 0 0</noiseNormalLinearVelocity>
      <!-- standard deviation of additive white gaussian noise [m/s] -->
      <noiseNormalAngularVelocity>0 0 0</noiseNormalAngularVelocity>
      <!-- standard deviation of additive white gaussian noise [rad/s] -->
      <noiseUniformPosition>0 0 0</noiseUniformPosition>
      <!-- symmetric bounds of uniform noise [m] -->
      <noiseUniformQuaternion>0 0 0</noiseUniformQuaternion>
      <!-- symmetric bounds of uniform noise [rad], computation see above -->
      <noiseUniformLinearVelocity>0 0 0</noiseUniformLinearVelocity>
      <!-- symmetric bounds of uniform noise [m/s] -->
      <noiseUniformAngularVelocity>0 0 0</noiseUniformAngularVelocity>
    </plugin>
  </gazebo>
  <!-- <xacro:sensor_d435 parent="${namespace}/base_link">
    <origin xyz="0.1 0 0.05" rpy="0 0 0"/>
  </xacro:sensor_d435> -->
  <joint name="gasket" type="fixed">
    <parent link="iris/base_link"/>
    <child link="iris/gasket_link"/>
    <origin rpy="0 0 0" xyz="0 0 -0.1"/>
  </joint>
  <link name="iris/gasket_link">
    <visual>
      <geometry>
        <cylinder length="0.2" radius="0.015"/>
      </geometry>
      <origin rpy="0 0 0 " xyz="0 0 0"/>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.2" radius="0.015"/>
      </geometry>
      <origin rpy="0 0 0 " xyz="0 0 0"/>
    </collision>
    <inertial>
      <mass value="0.001"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="3.3520819925e-05" ixy="0.0" ixz="0.0" iyy="3.3520819925e-05" iyz="0.0" izz="3.7499985e-07"/>
    </inertial>
  </link>
  <joint name="spring" type="prismatic">
    <parent link="iris/gasket_link"/>
    <child link="iris/spring_link"/>
    <axis xyz="0 0 1"/>
    <limit effort="-1" lower="-0.1" upper="0.1" velocity="0"/>
    <origin rpy="0 0 0" xyz="0 0 -0.2"/>
  </joint>
  <link name="iris/spring_link">
    <visual>
      <geometry>
        <cylinder length="0.4" radius="0.01"/>
      </geometry>
      <origin rpy="0 0 0 " xyz="0 0 0"/>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.4" radius="0.01"/>
      </geometry>
      <origin rpy="0 0 0 " xyz="0 0 0"/>
    </collision>
    <inertial>
      <mass value="0.001"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="0.0001334166133" ixy="0.0" ixz="0.0" iyy="0.0001334166133" iyz="0.0" izz="1.666666e-07"/>
    </inertial>
  </link>
  <!-- joint torsional spring plugin -->
  <gazebo>
    <plugin filename="libgazebo_joint_torsional_spring.so" name="knee_joint_torsional_spring">
      <kx>2000</kx>
      <damping>1</damping>
      <set_point>0.0</set_point>
      <joint>spring</joint>
    </plugin>
  </gazebo>
  <joint name="support" type="fixed">
    <parent link="iris/spring_link"/>
    <child link="iris/support_link"/>
    <origin rpy="0 0 0" xyz="0 0 -0.2"/>
  </joint>
  <link name="iris/support_link">
    <visual>
      <geometry>
        <sphere radius="0.04"/>
      </geometry>
      <origin rpy="0 0 0 " xyz="0 0 0"/>
    </visual>
    <collision>
      <geometry>
        <sphere radius="0.04"/>
      </geometry>
      <origin rpy="0 0 0 " xyz="0 0 0"/>
    </collision>
    <inertial>
      <mass value="0.06"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="0.000159999936" ixy="0.0" ixz="0.0" iyy="0.000159999936" iyz="0.0" izz="0.000159999936"/>
    </inertial>
  </link>
  <gazebo reference="iris/support_link">
    <mu1>0.00</mu1>
    <mu2>0.00</mu2>
  </gazebo>
  <!-- <joint name="support" type="fixed">
      <parent link="${robot_namespace}/spring_link"/>
      <child link="${robot_namespace}/support_link"/>
      <origin rpy="0 0 0" xyz="0 0 -0.2"/>
    </joint>

    <link name="${robot_namespace}/support_link">
      <visual>
        <geometry>
          <cylinder length="0.05" radius="0.04"/>
        </geometry>
        <origin xyz="0 0 0" rpy="0 0 0 "/>
      </visual>
      <collision>
        <geometry>
          <cylinder length="0.05" radius="0.04"/>
        </geometry>
        <origin xyz="0 0 0" rpy="0 0 0 "/>
      </collision>
      <inertial>
          <mass value="0.01" />
          <origin xyz="0 0 0" />
          <xacro:box_inertia x="0.04" y="0.04" z="0.05" mass="0.1" />
      </inertial>   
    </link> -->
</robot>

